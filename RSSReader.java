import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Simran Joshi
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel")
                : "" + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        //default title
        String title = "Empty title";
        //a child of channel is title
        int titleIndex = getChildElement(channel, "title");
        //extract title
        if (titleIndex != -1 && channel.child(titleIndex).numberOfChildren() > 0) {
            title = channel.child(titleIndex).child(0).label();
        }
        //default no link
        String link = "";
        //extract link
        int linkIndex = getChildElement(channel, "link");
        if (linkIndex != -1 && channel.child(linkIndex).numberOfChildren() > 0) {
            link = channel.child(linkIndex).child(0).label();
        }
        //extract description
        String description = "No description";
        //default no description
        int dscrIndex = getChildElement(channel, "description");
        if (dscrIndex != -1 && channel.child(dscrIndex).numberOfChildren() > 0) {
            description = channel.child(dscrIndex).child(0).label();
        }

        //printing and generate html formatted
        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1><a href=\"" + link + "\">" + title + "</a></h1>");
        out.println("<p>" + description + "</p>");
        out.println("<table border=\"1\">");
        out.println("<tr><th>Date</th><th>Source</th><th>News</th></tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
        //foot printing end

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        int i = 0;
        while (i < xml.numberOfChildren()) {
            if (xml.child(i).isTag() && xml.child(i).label().equals(tag)) {
                //tag to label
                return i;
            }
            i++;
        }
        return -1;

    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item")
                : "" + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        //extract pub date default no date
        String date = "No date available";
        int dateIndex = getChildElement(item, "pubDate");
        if (dateIndex != -1 && item.child(dateIndex).numberOfChildren() > 0) {
            date = item.child(dateIndex).child(0).label();
        }
        //default no source
        String source = "No Source";
        String sourceURL = "";
        int sourceIndex = getChildElement(item, "source");
        //extraction of source
        if (sourceIndex != -1) {
            XMLTree sourceElement = item.child(sourceIndex);

            if (sourceElement.numberOfChildren() > 0) {
                source = sourceElement.child(0).label();
            }

            if (sourceElement.hasAttribute("url")) {
                sourceURL = sourceElement.attributeValue("url");
            }
        }
        //extraction title or description title importance over index
        String news = "No title";
        int titleIndex = getChildElement(item, "title");
        int dscrIndex = getChildElement(item, "description");

        if (titleIndex != -1 && item.child(titleIndex).numberOfChildren() > 0) {
            news = item.child(titleIndex).child(0).label();
        } else if (dscrIndex != -1 && item.child(dscrIndex).numberOfChildren() > 0) {
            news = item.child(dscrIndex).child(0).label();
        }
        // news link extraction
        String newsLink = "";
        int linkIndex = getChildElement(item, "link");
        if (linkIndex != -1 && item.child(linkIndex).numberOfChildren() > 0) {
            newsLink = item.child(linkIndex).child(0).label();
        }
        //printing table and results
        out.println("<tr>");
        out.println("<td>" + date + "</td>");
        if (!sourceURL.isEmpty()) {
            out.println("<td><a href=\"" + sourceURL + "\" style=\"color:blue;\">"
                    + source + "</a></td>");
        } else {
            out.println("<td>" + source + "</td>");
        }
        if (!newsLink.isEmpty()) {
            out.print("<td><a href=\"" + newsLink + "\" style=\"color:blue;\">" + news
                    + "</a></td>");
        } else {
            out.println("<td>" + news + "</td>");
        }
        out.println("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        //prompting user for URL
        System.out.print("Enter a URL for the RSS Reader");
        String url = in.nextLine();
        //prompting for the HTML file
        out.println("Enter output HTML file: ");
        String file = in.nextLine();

        XMLTree xml = new XMLTree1(url);
        // confirms the RSS in correct RSS formatting
        if (!xml.label().equals("rss") || !xml.hasAttribute("version")
                || !xml.attributeValue("version").equals("2.0")) {
            out.print("Error: Invalid format");
        }
        XMLTree channel = xml.child(0);
        SimpleWriter htmlOut = new SimpleWriter1L(file);

        outputHeader(channel, htmlOut);
        int i = 0;
        //processing HTML out
        while (i < channel.numberOfChildren()) {
            if (channel.child(i).label().equals("item")) {
                processItem(channel.child(i), htmlOut);
            }
            i++;
        }
        //final printing of converted file
        out.println("RSS feed converted to " + file);
        outputFooter(htmlOut);
        in.close();
        out.close();
    }

}
